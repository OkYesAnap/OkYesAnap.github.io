{"version":3,"sources":["Turbo3-5.js","App.js","reportWebVitals.js","index.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","API_KEY","systemMessage","role","content","Turbo35","_ref","message","_useState","useState","sentTime","sender","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","isTyping","setIsTyping","handleSend","_ref2","_asyncToGenerator","_callee","newMessage","newMessages","_context","direction","concat","_toConsumableArray","processMessageToChatGPT","apply","arguments","_x","_processMessageToChatGPT","_callee2","chatMessages","apiMessages","apiRequestBody","_context2","map","messageObject","model","fetch","headers","Authorization","Content-Type","body","JSON","stringify","data","json","console","log","choices","React","createElement","onClick","App","answers","question","setQuestion","className","onChange","e","target","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7731110b.chunk.js","sourcesContent":["import React, { useState }  from 'react';\r\n\r\nconst API_KEY = \"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\";\r\n// \"Explain things like you would to a 10 year old learning how to code.\"\r\nconst systemMessage = { //  Explain things like you're talking to a software professional with 5 years of experience.\r\n    \"role\": \"system\", \"content\": \"inflation belly professional\"\r\n}\r\n\r\nfunction Turbo35({message}) {\r\n    const [messages, setMessages] = useState([\r\n        {\r\n            message: \"Hello\",\r\n            sentTime: \"just now\",\r\n            sender: \"ChatGPT\"\r\n        }\r\n    ]);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n\r\n\r\n    const handleSend = async () => {\r\n        const newMessage = {\r\n            message,\r\n            direction: 'outgoing',\r\n            sender: \"user\"\r\n        };\r\n\r\n        const newMessages = [...messages, newMessage];\r\n\r\n        setMessages(newMessages);\r\n\r\n        // Initial system message to determine ChatGPT functionality\r\n        // How it responds, how it talks, etc.\r\n        setIsTyping(true);\r\n        await processMessageToChatGPT(newMessages);\r\n    };\r\n\r\n    async function processMessageToChatGPT(chatMessages) { // messages is an array of messages\r\n\r\n\r\n        let apiMessages = chatMessages.map((messageObject) => {\r\n            let role = \"\";\r\n            if (messageObject.sender === \"ChatGPT\") {\r\n                role = \"assistant\";\r\n            } else {\r\n                role = \"user\";\r\n            }\r\n            return {role: role, content: messageObject.message}\r\n        });\r\n\r\n\r\n        // determine how we want chatGPT to act.\r\n        const apiRequestBody = {\r\n            \"model\": \"gpt-3.5-turbo\",\r\n            \"messages\": [\r\n                systemMessage,\r\n                ...apiMessages\r\n            ]\r\n        }\r\n\r\n        await fetch(\"https://api.openai.com/v1/chat/completions\",\r\n            {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \" + API_KEY,\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(apiRequestBody)\r\n            }).then((data) => {\r\n            return data.json();\r\n        }).then((data) => {\r\n            console.log(data);\r\n            setMessages([...chatMessages, {\r\n                message: data.choices[0].message.content,\r\n                sender: \"ChatGPT\"\r\n            }]);\r\n            setIsTyping(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isTyping ? <div content=\"\"> ChatGPT is typing </div> : null}\r\n            {messages.map((message, i) => {\r\n                console.log(message)\r\n                return <div key={i + message.message}>{message.message} <br/><br/><br/></div>\r\n            })}\r\n            <button onClick={handleSend}>ASK turbo 3.5</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Turbo35","import './App.css';\nimport React, { useState }  from 'react';\nimport axios from \"axios\";\nimport Turbo35 from \"./Turbo3-5\";\n\nfunction App() {\n\n    const [answers, setAnswers] = useState('')\n    const [question, setQuestion] = useState('')\n\n    const apiCall_davinci = (question) => {\n        axios.post('http://localhost:8080/chat', {prompt: question}).then(res => {\n            console.log(res.data);\n            setAnswers(res.data.choices[0].text)\n        }).catch(err => console.log(err))\n    }\n\n    const sendQuestion = async () => {\n        apiCall_davinci(question);\n    }\n\n    return (\n        <div className=\"App\">\n            <div>\n                <p>{answers}</p>\n            </div>\n            <Turbo35 message={question}/>\n            <input type={\"text\"} onChange={e => setQuestion(e.target.value)}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}